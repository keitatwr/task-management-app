// Code generated by MockGen. DO NOT EDIT.
// Source: domain/signup.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/keitatwr/todo-app/domain"
)

// MockSignupUsecase is a mock of SignupUsecase interface.
type MockSignupUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSignupUsecaseMockRecorder
}

// MockSignupUsecaseMockRecorder is the mock recorder for MockSignupUsecase.
type MockSignupUsecaseMockRecorder struct {
	mock *MockSignupUsecase
}

// NewMockSignupUsecase creates a new mock instance.
func NewMockSignupUsecase(ctrl *gomock.Controller) *MockSignupUsecase {
	mock := &MockSignupUsecase{ctrl: ctrl}
	mock.recorder = &MockSignupUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignupUsecase) EXPECT() *MockSignupUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSignupUsecase) Create(ctx context.Context, name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSignupUsecaseMockRecorder) Create(ctx, name, email, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSignupUsecase)(nil).Create), ctx, name, email, password)
}

// GetUserByEmail mocks base method.
func (m *MockSignupUsecase) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockSignupUsecaseMockRecorder) GetUserByEmail(ctx, email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockSignupUsecase)(nil).GetUserByEmail), ctx, email)
}
