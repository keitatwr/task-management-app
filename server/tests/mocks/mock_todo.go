// Code generated by MockGen. DO NOT EDIT.
// Source: domain/todo.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	domain "github.com/keitatwr/task-management-app/domain"
)

// MockTodoRepository is a mock of TodoRepository interface.
type MockTodoRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTodoRepositoryMockRecorder
}

// MockTodoRepositoryMockRecorder is the mock recorder for MockTodoRepository.
type MockTodoRepositoryMockRecorder struct {
	mock *MockTodoRepository
}

// NewMockTodoRepository creates a new mock instance.
func NewMockTodoRepository(ctrl *gomock.Controller) *MockTodoRepository {
	mock := &MockTodoRepository{ctrl: ctrl}
	mock.recorder = &MockTodoRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoRepository) EXPECT() *MockTodoRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoRepository) Create(ctx context.Context, todo *domain.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, todo)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoRepositoryMockRecorder) Create(ctx, todo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoRepository)(nil).Create), ctx, todo)
}

// Delete mocks base method.
func (m *MockTodoRepository) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoRepositoryMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoRepository)(nil).Delete), ctx, id)
}

// GetAllTodoByUserID mocks base method.
func (m *MockTodoRepository) GetAllTodoByUserID(ctx context.Context, id int) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodoByUserID", ctx, id)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodoByUserID indicates an expected call of GetAllTodoByUserID.
func (mr *MockTodoRepositoryMockRecorder) GetAllTodoByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodoByUserID", reflect.TypeOf((*MockTodoRepository)(nil).GetAllTodoByUserID), ctx, id)
}

// GetTodoByID mocks base method.
func (m *MockTodoRepository) GetTodoByID(ctx context.Context, id int) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", ctx, id)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockTodoRepositoryMockRecorder) GetTodoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockTodoRepository)(nil).GetTodoByID), ctx, id)
}

// Update mocks base method.
func (m *MockTodoRepository) Update(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoRepositoryMockRecorder) Update(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoRepository)(nil).Update), ctx, id)
}

// MockTodoUsecase is a mock of TodoUsecase interface.
type MockTodoUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTodoUsecaseMockRecorder
}

// MockTodoUsecaseMockRecorder is the mock recorder for MockTodoUsecase.
type MockTodoUsecaseMockRecorder struct {
	mock *MockTodoUsecase
}

// NewMockTodoUsecase creates a new mock instance.
func NewMockTodoUsecase(ctrl *gomock.Controller) *MockTodoUsecase {
	mock := &MockTodoUsecase{ctrl: ctrl}
	mock.recorder = &MockTodoUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTodoUsecase) EXPECT() *MockTodoUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTodoUsecase) Create(ctx context.Context, title, description string, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, title, description, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTodoUsecaseMockRecorder) Create(ctx, title, description, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTodoUsecase)(nil).Create), ctx, title, description, userID)
}

// Delete mocks base method.
func (m *MockTodoUsecase) Delete(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTodoUsecaseMockRecorder) Delete(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTodoUsecase)(nil).Delete), ctx, id)
}

// GetAllTodoByUserID mocks base method.
func (m *MockTodoUsecase) GetAllTodoByUserID(ctx context.Context, id int) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllTodoByUserID", ctx, id)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllTodoByUserID indicates an expected call of GetAllTodoByUserID.
func (mr *MockTodoUsecaseMockRecorder) GetAllTodoByUserID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllTodoByUserID", reflect.TypeOf((*MockTodoUsecase)(nil).GetAllTodoByUserID), ctx, id)
}

// GetTodoByID mocks base method.
func (m *MockTodoUsecase) GetTodoByID(ctx context.Context, id int) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTodoByID", ctx, id)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTodoByID indicates an expected call of GetTodoByID.
func (mr *MockTodoUsecaseMockRecorder) GetTodoByID(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTodoByID", reflect.TypeOf((*MockTodoUsecase)(nil).GetTodoByID), ctx, id)
}

// Update mocks base method.
func (m *MockTodoUsecase) Update(ctx context.Context, id int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTodoUsecaseMockRecorder) Update(ctx, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTodoUsecase)(nil).Update), ctx, id)
}
