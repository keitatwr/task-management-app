// Code generated by MockGen. DO NOT EDIT.
// Source: domain/signup.go
//
// Generated by this command:
//
//	mockgen -source=domain/signup.go -destination=tests/mock/mock_signup.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/keitatwr/task-management-app/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockSignupUsecase is a mock of SignupUsecase interface.
type MockSignupUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockSignupUsecaseMockRecorder
	isgomock struct{}
}

// MockSignupUsecaseMockRecorder is the mock recorder for MockSignupUsecase.
type MockSignupUsecaseMockRecorder struct {
	mock *MockSignupUsecase
}

// NewMockSignupUsecase creates a new mock instance.
func NewMockSignupUsecase(ctrl *gomock.Controller) *MockSignupUsecase {
	mock := &MockSignupUsecase{ctrl: ctrl}
	mock.recorder = &MockSignupUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSignupUsecase) EXPECT() *MockSignupUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockSignupUsecase) Create(ctx context.Context, name, email, password string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, name, email, password)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockSignupUsecaseMockRecorder) Create(ctx, name, email, password any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockSignupUsecase)(nil).Create), ctx, name, email, password)
}

// FetchUserByEmail mocks base method.
func (m *MockSignupUsecase) FetchUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByEmail indicates an expected call of FetchUserByEmail.
func (mr *MockSignupUsecaseMockRecorder) FetchUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByEmail", reflect.TypeOf((*MockSignupUsecase)(nil).FetchUserByEmail), ctx, email)
}
