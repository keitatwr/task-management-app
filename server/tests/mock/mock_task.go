// Code generated by MockGen. DO NOT EDIT.
// Source: domain/task.go
//
// Generated by this command:
//
//	mockgen -source=domain/task.go -destination=tests/mock/mock_task.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	domain "github.com/keitatwr/task-management-app/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockTaskRepository is a mock of TaskRepository interface.
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
	isgomock struct{}
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository.
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance.
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskRepository) Create(ctx context.Context, task *domain.Task) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, task)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockTaskRepositoryMockRecorder) Create(ctx, task any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskRepository)(nil).Create), ctx, task)
}

// Delete mocks base method.
func (m *MockTaskRepository) Delete(ctx context.Context, taskID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, taskID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskRepositoryMockRecorder) Delete(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), ctx, taskID)
}

// FetchAllTaskByTaskID mocks base method.
func (m *MockTaskRepository) FetchAllTaskByTaskID(ctx context.Context, taskIDs ...int) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx}
	for _, a := range taskIDs {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "FetchAllTaskByTaskID", varargs...)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllTaskByTaskID indicates an expected call of FetchAllTaskByTaskID.
func (mr *MockTaskRepositoryMockRecorder) FetchAllTaskByTaskID(ctx any, taskIDs ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx}, taskIDs...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTaskByTaskID", reflect.TypeOf((*MockTaskRepository)(nil).FetchAllTaskByTaskID), varargs...)
}

// FetchTaskByTaskID mocks base method.
func (m *MockTaskRepository) FetchTaskByTaskID(ctx context.Context, taskID int) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskByTaskID", ctx, taskID)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTaskByTaskID indicates an expected call of FetchTaskByTaskID.
func (mr *MockTaskRepositoryMockRecorder) FetchTaskByTaskID(ctx, taskID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskByTaskID", reflect.TypeOf((*MockTaskRepository)(nil).FetchTaskByTaskID), ctx, taskID)
}

// Update mocks base method.
func (m *MockTaskRepository) Update(ctx context.Context, taskID int, updateFields map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, taskID, updateFields)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskRepositoryMockRecorder) Update(ctx, taskID, updateFields any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), ctx, taskID, updateFields)
}

// MockTaskUsecase is a mock of TaskUsecase interface.
type MockTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUsecaseMockRecorder
	isgomock struct{}
}

// MockTaskUsecaseMockRecorder is the mock recorder for MockTaskUsecase.
type MockTaskUsecaseMockRecorder struct {
	mock *MockTaskUsecase
}

// NewMockTaskUsecase creates a new mock instance.
func NewMockTaskUsecase(ctrl *gomock.Controller) *MockTaskUsecase {
	mock := &MockTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUsecase) EXPECT() *MockTaskUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockTaskUsecase) Create(ctx context.Context, title, description string, userID int, due_date domain.DateOnly) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, title, description, userID, due_date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create.
func (mr *MockTaskUsecaseMockRecorder) Create(ctx, title, description, userID, due_date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockTaskUsecase)(nil).Create), ctx, title, description, userID, due_date)
}

// Delete mocks base method.
func (m *MockTaskUsecase) Delete(ctx context.Context, taskID, userID int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, taskID, userID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockTaskUsecaseMockRecorder) Delete(ctx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskUsecase)(nil).Delete), ctx, taskID, userID)
}

// FetchAllTaskByUserID mocks base method.
func (m *MockTaskUsecase) FetchAllTaskByUserID(ctx context.Context, userID int) ([]domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTaskByUserID", ctx, userID)
	ret0, _ := ret[0].([]domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchAllTaskByUserID indicates an expected call of FetchAllTaskByUserID.
func (mr *MockTaskUsecaseMockRecorder) FetchAllTaskByUserID(ctx, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTaskByUserID", reflect.TypeOf((*MockTaskUsecase)(nil).FetchAllTaskByUserID), ctx, userID)
}

// FetchTaskByTaskID mocks base method.
func (m *MockTaskUsecase) FetchTaskByTaskID(ctx context.Context, taskID, userID int) (*domain.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchTaskByTaskID", ctx, taskID, userID)
	ret0, _ := ret[0].(*domain.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchTaskByTaskID indicates an expected call of FetchTaskByTaskID.
func (mr *MockTaskUsecaseMockRecorder) FetchTaskByTaskID(ctx, taskID, userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchTaskByTaskID", reflect.TypeOf((*MockTaskUsecase)(nil).FetchTaskByTaskID), ctx, taskID, userID)
}

// Update mocks base method.
func (m *MockTaskUsecase) Update(ctx context.Context, taskID, userID int, title, description string, due_date domain.DateOnly) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, taskID, userID, title, description, due_date)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockTaskUsecaseMockRecorder) Update(ctx, taskID, userID, title, description, due_date any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskUsecase)(nil).Update), ctx, taskID, userID, title, description, due_date)
}
