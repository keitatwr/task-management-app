// Code generated by MockGen. DO NOT EDIT.
// Source: domain/login.go
//
// Generated by this command:
//
//	mockgen -source=domain/login.go -destination=tests/mock/mock_login.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	gin "github.com/gin-gonic/gin"
	domain "github.com/keitatwr/task-management-app/domain"
	gomock "go.uber.org/mock/gomock"
)

// MockLoginUsecase is a mock of LoginUsecase interface.
type MockLoginUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockLoginUsecaseMockRecorder
	isgomock struct{}
}

// MockLoginUsecaseMockRecorder is the mock recorder for MockLoginUsecase.
type MockLoginUsecaseMockRecorder struct {
	mock *MockLoginUsecase
}

// NewMockLoginUsecase creates a new mock instance.
func NewMockLoginUsecase(ctrl *gomock.Controller) *MockLoginUsecase {
	mock := &MockLoginUsecase{ctrl: ctrl}
	mock.recorder = &MockLoginUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLoginUsecase) EXPECT() *MockLoginUsecaseMockRecorder {
	return m.recorder
}

// CreateSession mocks base method.
func (m *MockLoginUsecase) CreateSession(ctx *gin.Context, user domain.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSession", ctx, user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateSession indicates an expected call of CreateSession.
func (mr *MockLoginUsecaseMockRecorder) CreateSession(ctx, user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSession", reflect.TypeOf((*MockLoginUsecase)(nil).CreateSession), ctx, user)
}

// GetUserByEmail mocks base method.
func (m *MockLoginUsecase) GetUserByEmail(ctx context.Context, email string) (*domain.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", ctx, email)
	ret0, _ := ret[0].(*domain.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockLoginUsecaseMockRecorder) GetUserByEmail(ctx, email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockLoginUsecase)(nil).GetUserByEmail), ctx, email)
}
